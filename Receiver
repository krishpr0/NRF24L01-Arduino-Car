//Receiver

#include <SPI.h>
#include <RF24.h>

#define in1 7 // L298n Motor Driver pins.
#define in2 4
#define in3 3
#define in4 2

RF24 radio(9, 10); // CE, CSN pins
const byte address[6] = "00001"; // Address for communication

struct DataPackage {
  int joystickX;
  int joystickY;
  bool joyButton;
  bool button1;
  bool button2;
};

DataPackage data; // Create a data structure

int Speed = 204; // Base speed

void setup() {
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);

  Serial.begin(9600);
  radio.begin();
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_MIN);
  radio.startListening(); // Set this as a receiver
  
  Serial.println("Receiver Initialized: Listening for commands...");
}

void loop() {
  if (radio.available()) {
    radio.read(&data, sizeof(DataPackage));
    
    // Print that data has been received
    Serial.println("Data Received:");
    Serial.print("Joystick X: ");
    Serial.print(data.joystickX);
    Serial.print(" Y: ");
    Serial.print(data.joystickY);
    Serial.print(" JoyBtn: ");
    Serial.print(data.joyButton);
    Serial.print(" Btn1: ");
    Serial.print(data.button1);
    Serial.print(" Btn2: ");
    Serial.println(data.button2);

    // Control motors based on joystick values
    controlMotors(data.joystickX, data.joystickY);

    // Handle buttons for additional features
    if (data.joyButton) {
      Stop();
    }
    
    if (data.button1) {
      Serial.println("Button 1 Activated");
      // Example: Activate lights or other feature
    }
    
    if (data.button2) {
      Serial.println("Button 2 Activated");
      // Example: Deactivate lights or other feature
    }
  }
}

void controlMotors(int x, int y) {
  int threshold = 50;
  
  if (y > 512 + threshold) {
    forward();
    Serial.println("Moving Forward");
  } else if (y < 512 - threshold) {
    back();
    Serial.println("Moving Backward");
  } else if (x < 512 - threshold) {
    left();
    Serial.println("Turning Left");
  } else if (x > 512 + threshold) {
    right();
    Serial.println("Turning Right");
  } else {
    Stop();
    Serial.println("Stopped");
  }
}

void forward() {
  analogWrite(in1, Speed);
  analogWrite(in3, Speed);
}

void back() {
  analogWrite(in2, Speed);
  analogWrite(in4, Speed);
}

void left() {
  analogWrite(in3, Speed);
  analogWrite(in2, Speed);
}

void right() {
  analogWrite(in4, Speed);
  analogWrite(in1, Speed);
}

void Stop() {
  analogWrite(in1, 0);
  analogWrite(in2, 0);
  analogWrite(in3, 0);
  analogWrite(in4, 0);
}
